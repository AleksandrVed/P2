#include <math.h>
#include <stdio.h>
#define pryamougol 1
#define trapesiya 2
#define BSimpson 3
#define  MAX_ITER 500

double f1(double,double );
double freq(double);
double getIntegralValue(int method, double a, double start_x, double stop_x, int n);
double rectIntegral(double a, double start_x, double stop_x, int N);
double trapIntegral(double a, double start_x, double stop_x, int N);
double simpIntegral(double a, double start_x, double stop_x, int N);
void absDifferenceCompare(int, int, int, double, double );
int main()
{
    printf("Значение интеграла: 45\n");
    printf("Интегрирование методом треугольника: %lf\n", getIntegralValue(pryamougol, 1, 0, 2 * M_PI, MAX_ITER));
    printf("Интегрирование методом трапеций: %lf\n", getIntegralValue(trapesiya, 1, 0, 3 * M_PI, MAX_ITER));
    printf("Интегрирование методом Симпсона: %lf\n", getIntegralValue(BSimpson, 1, 0, 4 * M_PI, MAX_ITER));
    printf("Нажмите x чтобы закрыть: ");
    char *var;
    scanf("%c", var);
    if (*var = 'x')
    {
        return 0;
    }
}
double function_integral(double a, double x)
{
    (-7)*(20*a*a+11*a*x+45*x*x)/(3*a*a-7*a*x+4*x*x);
}
double getIntegralValue(int method, double a, double start_x, double stop_x, int n)
{
    double result = 0.0;
    switch (method) {
        case pryamougol:
            result = rectIntegral(a, start_x, stop_x, n);
            break;
        case trapesiya:
            result = trapIntegral(a, start_x, stop_x, n);
            break;
        case BSimpson:
            result = simpIntegral(a, start_x, stop_x, n);
            break;
        default:
            break;
    }
    return result;
}
double rectIntegral(double a, double start_x, double stop_x, int N)
{
    return ((stop_x - start_x) * ((start_x + stop_x)/2));
}
double trapIntegral(double a, double start_x, double stop_x, int N)
{
    return 0.5*(stop_x - start_x)*(start_x + stop_x);
}
double simpIntegral(double a, double start_x, double stop_x, int N)
{
    return (stop_x - start_x) / 6.0 * (start_x + 4.0 * 0.5 * (start_x + stop_x) + stop_x);
}          
